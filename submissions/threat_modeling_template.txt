Docker Threat Modeling
Given Docker's system components and the STRIDE framework, identify five potential threats that may arise.

When applying the STRIDE framework to Docker's system components, here are five potential threats to consider:

a. Spoofing: Unauthorized entities or containers may attempt to impersonate legitimate Docker images, repositories, or registries. This could lead to the execution of malicious code or the compromise of sensitive data.

b. Tampering: Malicious actors may modify Docker images, either during transit or while at rest, to introduce vulnerabilities or backdoors. This can result in the execution of unauthorized code or the manipulation of container behavior.

c. Repudiation: Without proper logging and auditing mechanisms, it becomes challenging to trace and attribute actions performed within Docker containers. This could lead to repudiation threats, where users deny their involvement in certain activities, making it difficult to hold them accountable.

d. Information Disclosure: Weak container configurations or mismanagement of secrets and sensitive data within containers can lead to information disclosure. Unauthorized access to sensitive data, such as API keys or database credentials, can have severe consequences.

e. Denial of Service: Attackers may attempt to overload Docker hosts, containers, or networking resources to cause service disruption. This can be achieved through resource exhaustion attacks or by exploiting vulnerabilities in Docker components, leading to the unavailability of critical services.

========================================

Kubernetes Threat Modeling
Given Kubernetes' system components and the STRIDE framework, identify five potential threats that may arise.

When applying the STRIDE framework to Kubernetes' system components, here are five potential threats to consider:

a. Spoofing: Unauthorized entities may attempt to impersonate legitimate users, pods, or services within the Kubernetes cluster. This can lead to unauthorized access, data leakage, or the execution of malicious actions.

b. Tampering: Attackers may attempt to modify Kubernetes resources, such as pod specifications, deployment configurations, or cluster settings, to introduce vulnerabilities, disrupt service availability, or gain unauthorized privileges.

c. Repudiation: Insufficient or tamperable logging and auditing mechanisms within Kubernetes can enable malicious actors to deny their actions or make it difficult to trace their activities accurately. This can hinder accountability and forensic investigations.

d. Information Disclosure: Weak access controls, misconfigured permissions, or insecure pod configurations can result in the exposure of sensitive information within the Kubernetes cluster. Unauthorized access to secrets, credentials, or critical data can lead to data breaches and compromise the confidentiality of the system.

e. Denial of Service: Attackers may target Kubernetes components or resources to overwhelm the system's capacity and disrupt service availability. This can include resource exhaustion attacks, such as overwhelming the API server, or targeting networking components to cause network congestion.


========================================
Docker-bench Run Results and Analysis
From the failed findings, select and document 3 findings from the Docker-bench results that you want to harden based on the 5 attack surface areas you identified in Step 1. At least 1 of the 3 hardened findings should be different from the ones mentioned in the exercise (i.e. 5.10, 5.14, and 5.22).
based on doc CIS_Docker_Benchmark_v1.2.0

[FAIL] 2.2 Ensure the logging level is set to 'info' (Scored)

Description:
Set Docker daemon log level to info.

Remediation:
Ensure that the Docker daemon configuration file has the following configuration included "log-level": "info"


[FAIL] 4.5 Ensure Content trust for Docker is Enabled (Automated)

Description:
Content trust is disabled by default and should be enabled in line with organizational security policy.
Audit:
You should execute the following command: echo $DOCKER_CONTENT_TRUST
This should return a value of 1.
Remediation:
To enable content trust in a bash shell, you should enter the following command: export DOCKER_CONTENT_TRUST=1
Alternatively, you could set this environment variable in your profile file so that content trust in enabled on every login.

[Fail] 2.13 Ensure live restore is enabled (Scored)

Description:
The --live-restore option enables full support of daemon-less containers within Docker. It ensures that Docker does not stop containers on shutdown or restore and that it properly reconnects to the container when restarted.

Audit:
You should run docker info and ensure that the Live Restore Enabled property is set to true. docker info --format '{{ .LiveRestoreEnabled }}'
Alternatively, you could run the below command and ensure that --live-restore is in use. ps -ef | grep dockerd
The contents of /etc/docker/daemon.json should also be reviewed to ensure this setting is in place.
Remediation:
Run Docker in daemon mode and pass --live-restore to it as an argument. For Example, dockerd --live-restore





