Docker Threat Modeling
Given Docker's system components and the STRIDE framework, identify five potential threats that may arise.

When applying the STRIDE framework to Docker's system components, here are five potential threats to consider:

a. Spoofing: Unauthorized entities or containers may attempt to impersonate legitimate Docker images, repositories, or registries. This could lead to the execution of malicious code or the compromise of sensitive data.

b. Tampering: Malicious actors may modify Docker images, either during transit or while at rest, to introduce vulnerabilities or backdoors. This can result in the execution of unauthorized code or the manipulation of container behavior.

c. Repudiation: Without proper logging and auditing mechanisms, it becomes challenging to trace and attribute actions performed within Docker containers. This could lead to repudiation threats, where users deny their involvement in certain activities, making it difficult to hold them accountable.

d. Information Disclosure: Weak container configurations or mismanagement of secrets and sensitive data within containers can lead to information disclosure. Unauthorized access to sensitive data, such as API keys or database credentials, can have severe consequences.

e. Denial of Service: Attackers may attempt to overload Docker hosts, containers, or networking resources to cause service disruption. This can be achieved through resource exhaustion attacks or by exploiting vulnerabilities in Docker components, leading to the unavailability of critical services.

========================================

Kubernetes Threat Modeling
Given Kubernetes' system components and the STRIDE framework, identify five potential threats that may arise.

When applying the STRIDE framework to Kubernetes' system components, here are five potential threats to consider:

a. Spoofing: Unauthorized entities may attempt to impersonate legitimate users, pods, or services within the Kubernetes cluster. This can lead to unauthorized access, data leakage, or the execution of malicious actions.

b. Tampering: Attackers may attempt to modify Kubernetes resources, such as pod specifications, deployment configurations, or cluster settings, to introduce vulnerabilities, disrupt service availability, or gain unauthorized privileges.

c. Repudiation: Insufficient or tamperable logging and auditing mechanisms within Kubernetes can enable malicious actors to deny their actions or make it difficult to trace their activities accurately. This can hinder accountability and forensic investigations.

d. Information Disclosure: Weak access controls, misconfigured permissions, or insecure pod configurations can result in the exposure of sensitive information within the Kubernetes cluster. Unauthorized access to secrets, credentials, or critical data can lead to data breaches and compromise the confidentiality of the system.

e. Denial of Service: Attackers may target Kubernetes components or resources to overwhelm the system's capacity and disrupt service availability. This can include resource exhaustion attacks, such as overwhelming the API server, or targeting networking components to cause network congestion.


========================================
Docker-bench Run Results and Analysis
From the failed findings, select and document 3 findings from the Docker-bench results that you want to harden based on the 5 attack surface areas you identified in Step 1. At least 1 of the 3 hardened findings should be different from the ones mentioned in the exercise (i.e. 5.10, 5.14, and 5.22).
based on doc CIS_Docker_Benchmark_v1.2.0

[Fail] 1.2.1 Ensure a separate partition for containers has been created (Scored)

Description:
All Docker containers and their data and metadata is stored under /var/lib/docker directory. By default, /var/lib/docker should be mounted under either the / or /var partitions dependent on how the Linux operating system in use is configured.

Remediation:
For new installations, you should create a separate partition for the /var/lib/docker mount point. For systems which have already been installed, you should use the Logical Volume Manager (LVM) within Linux to create a new partition.


[Fail] 3.7 Ensure that registry certificate file ownership is set to root:root (Scored)

Description:
You should verify that all the registry certificate files (usually found under /etc/docker/certs.d/<registry-name> directory) are individually owned and group owned by root.

Remediation:
The following command could be executed: chown root:root /etc/docker/certs.d/<registry-name>/*
This would set the individual ownership and group ownership for the registry certificate files to root.


[Fail] 4.1 Ensure that a user for the container has been created (Scored)

Description:
Containers should run as a non-root user.

Remediation:
You should ensure that the Dockerfile for each container image contains the information below: USER <username or ID>
In this case, the user name or ID refers to the user that was found in the container base image. If there is no specific user created in the container base image, then make use of the useradd command to add a specific user before the USER instruction in the Dockerfile. For example, add the below lines in the Dockerfile to create a user in the container: RUN useradd -d /home/username -m -s /bin/bash username USER username
Note: If there are users in the image that are not needed, you should consider deleting them. After deleting those users, commit the image and then generate new instances of the containers. Alternatively, if it is not possible to set the USER directive in the Dockerfile, a script running as part of the CMD or ENTRYPOINT sections of the Dockerfile should be used to ensure that the container process switches to a non-root user.
